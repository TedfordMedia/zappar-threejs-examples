"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = require("three");
const zappar_1 = require("@zappar/zappar");
const camera_1 = require("./camera");
const gl_matrix_1 = require("gl-matrix");
class FaceLandmarkGroup extends THREE.Group {
    constructor(_camera, faceTracker, landmark) {
        super();
        this._camera = _camera;
        this.faceTracker = faceTracker;
        this._pose = gl_matrix_1.mat4.create();
        this.landmark = new zappar_1.FaceLandmark(landmark);
        // We'll be updating this Group's matrix ourselves from the Zappar library
        this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
        if (!this.currentAnchor || !this.faceTracker.visible.has(this.currentAnchor)) {
            // No current anchor, or current anchor isn't visible
            this.currentAnchor = this.faceTracker.visible.values().next().value;
        }
        if (this.currentAnchor) {
            this.landmark.updateFromFaceAnchor(this.currentAnchor, this._camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses);
            gl_matrix_1.mat4.multiply(this._pose, this.currentAnchor.pose(this._camera.rawPose, this._camera.currentMirrorMode === camera_1.CameraMirrorMode.Poses), this.landmark.pose);
            this.matrix.fromArray(this._pose);
        }
        super.updateMatrixWorld(force);
    }
    dispose() {
        this.landmark.destroy();
    }
}
exports.FaceLandmarkGroup = FaceLandmarkGroup;
