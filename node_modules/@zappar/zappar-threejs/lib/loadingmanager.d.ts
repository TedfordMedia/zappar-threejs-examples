import { LoadingManager as Manager } from 'three';
import * as CSS from 'csstype';
declare type OnProgress = ((url: string, loaded: number, total: number) => void) | undefined;
declare type OnLoad = (() => void) | undefined;
declare type OnError = ((url: string) => void) | undefined;
export interface LoaderStyle {
    container?: CSS.Properties;
    inner?: CSS.Properties;
    title?: CSS.Properties;
    progress?: CSS.Properties;
    progressValue?: CSS.Properties;
}
declare class UI {
    containerDiv: HTMLElement;
    customStyle: LoaderStyle | undefined;
    lastLoadPercentage: number;
    divs: {
        inner: HTMLDivElement;
        title: HTMLDivElement;
        progress: HTMLDivElement;
        progressValue: HTMLDivElement;
    };
    css: LoaderStyle;
    constructor(style?: LoaderStyle);
    updateLoader: (load_percentage: number) => void;
    dispose: () => void;
    initialize(): void;
    refreshStyle(): void;
}
export declare class DefaultLoaderUI extends UI {
    constructor(options?: {
        style?: LoaderStyle;
        onLoad?: OnLoad;
    });
}
export declare class LoadingManager extends Manager {
    ui: UI;
    private onStartCallback;
    constructor(options?: {
        style?: LoaderStyle;
        onLoad?: OnLoad;
        onProgress?: OnProgress;
        onError?: OnError;
    });
    readonly onStart: () => void;
    _onStart: (callback: Function) => void;
    dispose: () => void;
}
export {};
