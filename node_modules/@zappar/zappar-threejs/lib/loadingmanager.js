"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const three_1 = require("three");
const THREE = require("three");
class UI {
    constructor(style) {
        this.lastLoadPercentage = 0;
        this.divs = {
            inner: document.createElement('div'),
            title: document.createElement('div'),
            progress: document.createElement('div'),
            progressValue: document.createElement('div')
        };
        this.css = {
            container: {
                position: 'fixed',
                width: '100%',
                height: '100%',
                top: '0px',
                left: '0px',
                zIndex: 10000,
                backgroundColor: 'rgba(0,0,0,0.8)',
                fontFamily: 'sans-serif',
                color: 'rgba(255,255,255,1)',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'opacity 500ms'
            },
            inner: {
                maxWidth: '400px',
                textAlign: 'center'
            },
            title: {
                fontSize: '20px'
            },
            progress: {
                background: 'rgba(255,255,255, 0.1)',
                justifyContent: 'flex-start',
                borderRadius: '100px',
                alignItems: 'center',
                position: 'relative',
                padding: '0 5px',
                display: 'flex',
                height: '15px',
                width: '250px',
                margin: '15px'
            },
            progressValue: {
                boxShadow: '0 10px 40px -10px #fff',
                borderTopLeftRadius: '100px',
                borderBottomLeftRadius: '100px',
                background: 'rgba(255,255,255,1)',
                height: '10px',
                width: '0',
                transition: 'width 500ms',
            }
        };
        // update loading bar based on % = (n-loaded / n-total * 100)
        this.updateLoader = (load_percentage) => {
            if (load_percentage < this.lastLoadPercentage)
                return;
            this.lastLoadPercentage = load_percentage;
            const elem = document.getElementById("zappar-loader-progressValue");
            elem.style.width = load_percentage + '%';
            elem.style.borderTopRightRadius = load_percentage + 'px';
            elem.style.borderBottomRightRadius = load_percentage + 'px';
            elem.addEventListener("transitionend", (ev) => {
                if (load_percentage == 100) {
                    this.containerDiv.style.opacity = "0";
                    this.containerDiv.addEventListener("transitionend", (ev) => {
                        if (ev.propertyName == 'opacity') {
                            this.dispose();
                        }
                    });
                }
            });
        };
        this.dispose = () => {
            this.containerDiv.remove();
        };
        this.customStyle = style;
        this.containerDiv = document.createElement("div");
    }
    initialize() {
        for (const key in this.divs) {
            this.divs[key].id = `zappar-loader-${key}`;
        }
        this.refreshStyle();
        this.divs.inner.appendChild(this.divs.title);
        this.divs.inner.appendChild(this.divs.progress);
        this.divs.progress.appendChild(this.divs.progressValue);
        this.containerDiv.appendChild(this.divs.inner);
        this.divs.title.innerHTML = 'Loading..';
        document.body.append(this.containerDiv);
    }
    refreshStyle() {
        var _a, _b, _c, _d, _e;
        Object.assign(this.css.container, (_a = this.customStyle) === null || _a === void 0 ? void 0 : _a.container);
        Object.assign(this.css.inner, (_b = this.customStyle) === null || _b === void 0 ? void 0 : _b.inner);
        Object.assign(this.css.title, (_c = this.customStyle) === null || _c === void 0 ? void 0 : _c.title);
        Object.assign(this.css.progress, (_d = this.customStyle) === null || _d === void 0 ? void 0 : _d.progress);
        Object.assign(this.css.progressValue, (_e = this.customStyle) === null || _e === void 0 ? void 0 : _e.progressValue);
        Object.assign(this.containerDiv.style, this.css.container);
        Object.assign(this.divs.inner.style, this.css.inner);
        Object.assign(this.divs.title.style, this.css.title);
        Object.assign(this.divs.progress.style, this.css.progress);
        Object.assign(this.divs.progressValue.style, this.css.progressValue);
    }
}
class DefaultLoaderUI extends UI {
    constructor(options) {
        var _a;
        super((_a = options) === null || _a === void 0 ? void 0 : _a.style);
        THREE.DefaultLoadingManager.onStart = (url, itemsLoaded, itemsTotal) => {
            this.initialize();
        };
        THREE.DefaultLoadingManager.onLoad = () => {
            var _a, _b, _c;
            (_c = (_a = options) === null || _a === void 0 ? void 0 : (_b = _a).onLoad) === null || _c === void 0 ? void 0 : _c.call(_b);
        };
        THREE.DefaultLoadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {
            this.updateLoader(itemsLoaded / itemsTotal * 100);
        };
    }
}
exports.DefaultLoaderUI = DefaultLoaderUI;
class LoadingManager extends three_1.LoadingManager {
    constructor(options) {
        var _a;
        super(() => { var _a, _b, _c; return (_c = (_a = options) === null || _a === void 0 ? void 0 : (_b = _a).onLoad) === null || _c === void 0 ? void 0 : _c.call(_b); }, (url, loaded, total) => {
            var _a, _b, _c, _d;
            this.ui.customStyle = (_a = options) === null || _a === void 0 ? void 0 : _a.style;
            this.ui.refreshStyle();
            (_d = (_b = options) === null || _b === void 0 ? void 0 : (_c = _b).onProgress) === null || _d === void 0 ? void 0 : _d.call(_c, url, loaded, total);
            this.ui.updateLoader(loaded / total * 100);
        }, (_a = options) === null || _a === void 0 ? void 0 : _a.onError);
        this.ui = new UI(); // no multiple inheritance (╯°□°)╯︵ ┻━┻
        this.onStartCallback = undefined;
        this.onStart = () => {
            this.ui.initialize();
            if (this.onStartCallback)
                this.onStartCallback();
        };
        this._onStart = (callback) => {
            this.onStartCallback = callback;
        };
        this.dispose = () => {
            this.ui.dispose();
        };
    }
}
exports.LoadingManager = LoadingManager;
